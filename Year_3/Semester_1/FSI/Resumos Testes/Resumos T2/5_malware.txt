Controlo é um servico
	ha governos que pagam muito dinheiro por estes produtos/servicos
	isto gera um enorme mercado para vulnerabilidades/exploits
		zero day => porta aberta para novo malware

Botnets
	rede de computadores com um sistema de comando e controlo (c2) comum:
		cada computador é um "bot"
	controlador envia comandos atraves da rede:
		spam, phishing, etc
	teem geralmente capacidade de se atualizar automaticamente
	dois tipos de arquitectura:
		centralizada, multiplos servidores centrais para robustez
		peer-to-peer, auto organizada, hierarquica
	dois tipos de fluxo:
		push => servidor envia comandos
		pull => periodicamente bot pergunta se ha comandos
	recuperacao no caso de ataque ao controlador:
		procurar novos servidores utilizando algoritmos de geracao dinamica e dominios
	detecao e combate:
		estrategias:
			detectar malware na maquina comprometida
			detectar trafego de rede para comunicacao com C2
			expor maquina (honeypots) para serem comprometidas e monitorizadas
		combate:
			limpar maquinas comprometidas e/ou isola-las da rede
			isolar/desligar C2
			tomar controlo do C2 e usa-lo para desativar botnet

detecao:
	combater malware:
		terminologia:
			intrusion detection system
			intrusion prevention system
			host/network based IDS
		IDS => detecao ocorre depois do ataque ser concretizado
		IPS => intervencao rapida para evitar ataque
	erros de detecao:
		falso positivo: alerta de um problema que nao existe
		falso negativo: ausencia de alerta quando problema existe
		precisao geralmente especificada relativamente à frequencia de occorencia destes erros:
			I => evento de intrusao, D => evento de alerta/detecao
			Falso positivo => probabilidade de D nao havendo I
			Falso negativo => probabilidade de nao D havendo I
		problemas na pratica:
			cenario 1: servidor que atende 1k pedidos/dia, sendo 5 maliciosos
				FP a 0.1% => 1 FP/dia
				FN a 2% => 0.1 FN/dia
			cenario 2: servidor que atende 10M pedidos/dia, sendo 5 maliciosos
				FP  a 0.1% => 100 FP/dia
				problema: quando a frequencia relativa de ataques é muito baixa, é dificil ter um sistema eficaz e eficiente
	como se detecta malware:
		signature-based: reconhecer assinaturas, padroes em ataques conhecidos (black listing)
			facil de implementar, eficaz contra ataques conhecidos
		anomalias: utilizacao de recursos (ex. acesso a rede anomalo, acesso a ficheiros sensiveis)
			ideal para detecao de uma grande gama de ataques, sem enumeracao exaustiva
			menos precisa quando ataques conhecidos e particularmente sensivel a eventos raros
		integridade/especificacao: especificar o que é correto, manter registo que permite detetar alteracoes a ficheiros criticos (ex. whitelist de 
		processos)
			pode apanhar ataques novos, mas existe muito esforco e constante atualizacao

antivirus: detecao de assinaturas
	virus nao podem ser totalmente invisiveis
		codigo armazenado algures
		virus muda qq coisa quando executa
		para virus conhecido: extrair assinatura, padrao unico
	onde procurar?
		geralmente head/tail => string padrao no principio e fim dos ficheiros
			evolucao => procurar com base no control-flow do programa
	temos uma corrida às armas:
		evolucao para virus cifrados => o virus recifra-se com uma nova chave, pelo que os padroes alteram-se de um ficheiro para outro
		evolucao para polimorfismo => propria rotina de decifracao é alterada
		virus inclui um "mutation engine" que sintetiza versoes alternativas do codigo
		
	antivirus modernos:
		scanning de rede
			detetar e bloquear ataques conhecidos
			detetar e bloquear comunicacao de malware
		scanning de "payload"
			detetar e bloquear malware conhecido
			auto-atualizar assinaturas de malware
	host-base IDS:
		execucao em sandbox:
			permitem executar alguns programas numa sandbox
			analizar utilizacao de recursos e comportamentos suspeitos
		scanning de ficheiros para detecao de malware no disco
		scanning de memoria para malware que nunca se armazena no disco
		monitorizacao de metrica em runtime para detetar anomalias
	network IDS:
		extracao de objetos complexos e vasto numero de protocolos
		analise de assinaturas e comportamentos:
			ataques conhecidos e comunicacao de malware
			"payloads conhecidas", sequencias/padroes de atividade
		execucao "shadow" para detecao de problemas (ex. analise de PDF)
		logging
		atualizacao automatica de assinaturas, black lists, etc
	HIDS vs NIDS:
		beneficios de NIDS:
			sistema unico permite proteger muitos sistemas diversos
			mais simples de gerir e instalar
			nao ocupa recursos nos sistemas em producao
			mais dificil acesso aos atacantes
		beneficios de HIDS:
			tem acesso direto à semantica da atividade maliciosa:
				observa os efeitos do ataque
				mais dificil de contornar, porque é mais preciso
			protege de ameacas que nao veem da rede (ex. USB)
			possivel observar dados que estao cifrados na rede
			nao afeta o sistema todo, possivel configurar de maneira mais fina